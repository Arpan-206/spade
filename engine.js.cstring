"let setTimeout, setInterval, clearInterval, clearTimeout;\n"
"const {\n"
"  /* sprite interactions */ setSolids, setPushables,\n"
"  /*              see also: sprite.x +=, sprite.y += */\n"
"\n"
"  /* art */ setLegend, setBackground,\n"
"  /* text */ addText, clearText,\n"
"\n"
"  /*   spawn sprites */ setMap, addSprite,\n"
"  /* despawn sprites */ clearTile, /* sprite.remove() */\n"
"\n"
"  /* tile queries */ getGrid, getTile, getFirst, getAll, tilesWith,\n"
"  /* see also: sprite.type */\n"
"\n"
"  /* map dimensions */ width, height,\n"
"\n"
"  /* constructors */ bitmap, tune, map,\n"
"\n"
"  /* input handling */ onInput, afterInput,\n"
"\n"
"  /* how much sprite has moved since last onInput: sprite.dx, sprite.dy */\n"
"\n"
"  playTune,\n"
"} = (() => {\n"
"const exports = {};\n"
"/* re-exports from C; bottom of module_native.c has notes about why these are in C */\n"
"exports.setMap = map => native.setMap(map.trim());\n"
"exports.addSprite = native.addSprite;\n"
"exports.getGrid = native.getGrid;\n"
"exports.getTile = native.getTile;\n"
"exports.tilesWith = native.tilesWith;\n"
"exports.clearTile = native.clearTile;\n"
"exports.getFirst = native.getFirst;\n"
"exports.getAll = native.getAll;\n"
"exports.width = native.width;\n"
"exports.height = native.height;\n"
"exports.setBackground = native.setBackground;\n"
"\n"
"\n"
"/* opts: x, y, color (all optional) */\n"
"exports.addText = (str, opts={}) => {\n"
"  console.log(\"engine.js:addText\");\n"
"  const CHARS_MAX_X = 21;\n"
"  const padLeft = Math.floor((CHARS_MAX_X - str.length)/2);\n"
"\n"
"  native.text_add(\n"
"    str,\n"
"    opts.color ?? [10, 10, 40],\n"
"    opts.x ?? padLeft,\n"
"    opts.y ?? 0\n"
"  );\n"
"}\n"
"\n"
"exports.clearText = () => native.text_clear();\n"
"\n"
"\n"
"exports.setLegend = (...bitmaps) => {\n"
"  console.log(\"engine.js:setLegend\");\n"
"  native.legend_clear();\n"
"  for (const [charStr, bitmap] of bitmaps) {\n"
"    native.legend_doodle_set(charStr, bitmap.trim());\n"
"  }\n"
"  native.legend_prepare();\n"
"};\n"
"\n"
"exports.setSolids = solids => {\n"
"  console.log(\"engine.js:setSolids\");\n"
"  native.solids_clear();\n"
"  solids.forEach(native.solids_push);\n"
"};\n"
"\n"
"exports.setPushables = pushTable => {\n"
"  console.log(\"engine.js:setPushables\");\n"
"  native.push_table_clear();\n"
"  for (const [pusher, pushesList] of Object.entries(pushTable))\n"
"    for (const pushes of pushesList)\n"
"      native.push_table_set(pusher, pushes);\n"
"};\n"
"\n"
"let afterInputs = [];\n"
"exports.afterInput = fn => (console.log('engine.js:afterInputs'), afterInputs.push(fn));\n"
"\n"
"const button = {\n"
"  pinToHandlers: {\n"
"     \"5\": [],\n"
"     \"7\": [],\n"
"     \"6\": [],\n"
"     \"8\": [],\n"
"    \"12\": [],\n"
"    \"14\": [],\n"
"    \"13\": [],\n"
"    \"15\": [],\n"
"  },\n"
"  keyToPin: {\n"
"    \"w\":  \"5\",\n"
"    \"s\":  \"7\",\n"
"    \"a\":  \"6\",\n"
"    \"d\":  \"8\",\n"
"    \"i\": \"12\",\n"
"    \"k\": \"14\",\n"
"    \"j\": \"13\",\n"
"    \"l\": \"15\",\n"
"  }\n"
"};\n"
"\n"
"native.press_cb(pin => {\n"
"  button.pinToHandlers[pin].forEach(f => f());\n"
"\n"
"  afterInputs.forEach(f => f());\n"
"\n"
"  native.map_clear_deltas();\n"
"});\n"
"\n"
"{\n"
"  let timers = [];\n"
"  let id = 0;\n"
"  setTimeout  = (fn, ms) => (timers.push({ fn, ms, id }), id++);\n"
"  setInterval = (fn, ms) => (timers.push({ fn, ms, id, restartAt: ms }), id++);\n"
"  clearTimeout = clearInterval = id => {\n"
"    timers = timers.filter(t => t.id != id);\n"
"  };\n"
"  native.frame_cb(dt_secs => {\n"
"    const dt = dt_secs * 1000;\n"
"    timers = timers.filter(tim => {\n"
"      if (tim.ms <= 0) {\n"
"        /* trigger their callback */\n"
"        tim.fn();\n"
"\n"
"        /* in case they cleared themselves */\n"
"        if (!timers.some(t => t == tim))\n"
"          return false;\n"
"\n"
"        /* restart intervals, clear timeouts */\n"
"        if (tim.restartAt !== undefined)\n"
"          tim.ms = tim.restartAt;\n"
"        else\n"
"          return false;\n"
"      }\n"
"      tim.ms -= dt;\n"
"      return true;\n"
"    });\n"
"  });\n"
"}\n"
"\n"
"exports.onInput = (key, fn) => {\n"
"  console.log(\"engine.js:onInput\");\n"
"  const pin = button.keyToPin[key];\n"
"\n"
"  if (pin === undefined)\n"
"    throw new Error(`the sprig doesn't have a \"${key}\" button!`);\n"
"\n"
"  button.pinToHandlers[pin].push(fn);\n"
"};\n"
"\n"
"exports.playTune = () => {};\n"
"\n"
"function _makeTag(cb) {\n"
"  return (strings, ...interps) => {\n"
"    if (typeof strings === \"string\") {\n"
"      throw new Error(\"Tagged template literal must be used like name`text`, instead of name(`text`)\");\n"
"    }\n"
"    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');\n"
"    return cb(string);\n"
"  }\n"
"}\n"
"exports.bitmap = _makeTag(text => text);\n"
"exports.tune = _makeTag(text => text);\n"
"exports.map = _makeTag(text => text);\n"
"return exports;\n"
"})();\n"
"/*\n"
"@title: kill pigs\n"
"@author: luiq\n"
"\n"
"Instructions:\n"
"  You are a storm god and you want some pigs to make your dinner...\n"
"\n"
"  So you need to choose and kill the rigth pig into each of 4 levels\n"
"  Which level the number of pigs increase\n"
"  With \"a\" you move left\n"
"  With \"d\" you move rigth\n"
"  With \"j\" you throw the ray\n"
"\n"
"  Enjoy and good dinner :)\n"
"*/\n"
"\n"
"const player = \"p\"\n"
"const ray = \"r\"\n"
"const cloud1 = \"c\"\n"
"const cloud2 = \"q\"\n"
"const pig = \"g\"\n"
"const star = \"s\"\n"
"\n"
"setLegend(\n"
"  [ player, bitmap`\n"
".........6......\n"
"....0...06......\n"
"....0000066.....\n"
".....000.666....\n"
"..0..000.666....\n"
"..00..0...666...\n"
"..000000000666..\n"
"..0000000000666.\n"
".....000....666.\n"
".....000.....66.\n"
".....000.....66.\n"
"....00000.....6.\n"
"....00.00.....6.\n"
"....00.00.....6.\n"
"....00.00.......\n"
"....00.00.......`],\n"
"  [ ray, bitmap`\n"
"................\n"
"................\n"
"................\n"
"......6.........\n"
"......6.........\n"
"......66........\n"
"......666.......\n"
".......66.......\n"
".......66.......\n"
"........66......\n"
".........6......\n"
".........6......\n"
"................\n"
"................\n"
"................\n"
"................`],\n"
"  [ cloud1, bitmap`\n"
"....77.77.777...\n"
"7777777777777777\n"
"7777777777777777\n"
"77777777777777..\n"
".7777777777777..\n"
"...7777777777...\n"
"....7777777.....\n"
"......77........\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................`],\n"
"  [ cloud2, bitmap`\n"
"..77............\n"
"..777777.....77.\n"
"7777777.....7777\n"
"7777777777.77777\n"
"7777777777777777\n"
".77777777777777.\n"
".77777777777777.\n"
"....77.7777.....\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................`],\n"
"  [ pig, bitmap`\n"
"................\n"
"...000.....000..\n"
"..0888.000.8880.\n"
"..0880088800880.\n"
"...00888888800..\n"
"...08028882080..\n"
"..0880088800880.\n"
"..0888800088880.\n"
"..0888088808880.\n"
"..0888008008880.\n"
"...08808880880..\n"
"...08880008880..\n"
"....088888880...\n"
"....080888080...\n"
"....088000880...\n"
"....000...000...`],\n"
"  [ star, bitmap`\n"
"5525555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555555555\n"
"5555555555552555\n"
"5555555555522255\n"
"5555555555222225\n"
"5555555555522255\n"
"5525555555552555\n"
"5222555555555555\n"
"2222255555555555\n"
"5222555555555555`],\n"
");\n"
"\n"
"let level = 0;\n"
"const levels = [\n"
"  map`\n"
"...p...\n"
"qcqcqcq\n"
".......\n"
".......\n"
".......\n"
"..g.g..`,\n"
"  map`\n"
"...p...\n"
"qcqcqcq\n"
".......\n"
".......\n"
".......\n"
"..ggg..`,\n"
"  map`\n"
"...p...\n"
"qcqcqcq\n"
".......\n"
".......\n"
".......\n"
"g.ggg.g`,\n"
"  map`\n"
"...p...\n"
"qcqcqcq\n"
".......\n"
".......\n"
".......\n"
"ggggggg`,\n"
"];\n"
"\n"
"setBackground(star)\n"
"setMap(levels[level])\n"
"setSolids([ player, pig ]);\n"
"setPushables({\n"
"  [player]: []\n"
"});\n"
"\n"
"let isThrowingRay = false\n"
"const timeout = (t) => new Promise((res) => setTimeout(() => res(), t))\n"
"const getRandomValueFromSize = (s) => Math.floor(Math.random()*s)\n"
"const setKeyMap = () => {\n"
"  const charMap = {\n"
"    a: (p) => () => p.x--,\n"
"    d: (p) => () => p.x++,\n"
"  }\n"
"  \n"
"  Object.keys(charMap).forEach((c) => \n"
"    onInput(c, charMap[c](getFirst(player)))\n"
"  )\n"
"}\n"
"const startLevel = (level) => {\n"
"  setKeyMap()\n"
"  addText(\"\" + (level + 1), { x: 1, y: 0, color: [ 255, 0, 0 ] })\n"
"  \n"
"}\n"
"startLevel(level)\n"
"\n"
"const throwRay = async (x, y) => {\n"
"  isThrowingRay = true\n"
"\n"
"  addSprite(x, y, ray)\n"
"  const thisRay = getFirst(ray)\n"
"  \n"
"  for (let i = 0; i < 5; i++) {\n"
"    await timeout(500)  \n"
"    thisRay.y++\n"
"  }\n"
"  isThrowingRay = false\n"
"  return thisRay.x\n"
"}\n"
"\n"
"onInput(\"j\", async () => {\n"
"  if (isThrowingRay) return\n"
"\n"
"  const pigs = getAll(pig)\n"
"  const anyPig = pigs[getRandomValueFromSize(pigs.length)]\n"
"  pigs.forEach(({x, y}) => x !== anyPig.x ? clearTile(x, y) : false)\n"
"  \n"
"  const thisPlayer = getFirst(player)\n"
"  const rayPosition = await throwRay(thisPlayer.x, thisPlayer.y)\n"
"\n"
"  const isWin = getAll(pig).some(({ x }) => x === rayPosition )\n"
"  const message = isWin ? \"You Win\" : \"You Lose\"\n"
"  \n"
"  addText(message, { x: 6, y: 8, color: [ 255, 0, 0 ] })\n"
"  await timeout(1000)\n"
"  clearText()\n"
"  \n"
"  if (isWin) {\n"
"    ++level\n"
"    \n"
"    if (!levels[level]) {\n"
"      level = 0\n"
"    }\n"
"    \n"
"    setMap(levels[level])\n"
"    startLevel(level)\n"
"\n"
"    return\n"
"  }\n"
"\n"
"  setMap(levels[level])\n"
"  startLevel(level)\n"
"});\n"
