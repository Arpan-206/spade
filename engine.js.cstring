"const {\n"
"  /* sprite interactions */ setSolids, setPushables,\n"
"  /*              see also: sprite.x +=, sprite.y += */\n"
"\n"
"  /* art */ setLegend, setBackground,\n"
"  /* text */ addText, clearText,\n"
"\n"
"  /*   spawn sprites */ setMap, addSprite,\n"
"  /* despawn sprites */ clearTile, /* sprite.remove() */\n"
"\n"
"  /* tile queries */ getGrid, getTile, getFirst, getAll, tilesWith,\n"
"  /* see also: sprite.type */\n"
"\n"
"  /* map dimensions */ width, height,\n"
"\n"
"  /* constructors */ bitmap, tune, map,\n"
"\n"
"  /* input handling */ onInput, afterInput,\n"
"\n"
"  /* how much sprite has moved since last onInput: sprite.dx, sprite.dy */\n"
"\n"
"  playTune,\n"
"} = (() => {\n"
"const exports = {};\n"
"/* re-exports from C; bottom of module_native.c has notes about why these are in C */\n"
"exports.setMap = map => native.setMap(map.trim());\n"
"exports.addSprite = native.addSprite;\n"
"exports.getGrid = native.getGrid;\n"
"exports.getTile = native.getTile;\n"
"exports.tilesWith = native.tilesWith;\n"
"exports.clearTile = native.clearTile;\n"
"exports.getFirst = native.getFirst;\n"
"exports.getAll = native.getAll;\n"
"exports.width = native.width;\n"
"exports.height = native.height;\n"
"exports.setBackground = native.setBackground;\n"
"\n"
"\n"
"/* opts: x, y, color (all optional) */\n"
"exports.addText = (str, opts={}) => {\n"
"  console.log(\"engine.js:addText\");\n"
"  const CHARS_MAX_X = 21;\n"
"  const padLeft = Math.floor((CHARS_MAX_X - str.length)/2);\n"
"\n"
"  native.text_add(\n"
"    str,\n"
"    opts.color ?? [10, 10, 40],\n"
"    opts.x ?? padLeft,\n"
"    opts.y ?? 0\n"
"  );\n"
"}\n"
"\n"
"exports.clearText = () => native.text_clear();\n"
"\n"
"\n"
"exports.setLegend = (...bitmaps) => {\n"
"  console.log(\"engine.js:setLegend\");\n"
"  native.legend_clear();\n"
"  for (const [charStr, bitmap] of bitmaps) {\n"
"    native.legend_doodle_set(charStr, bitmap.trim());\n"
"  }\n"
"  native.legend_prepare();\n"
"};\n"
"\n"
"exports.setSolids = solids => {\n"
"  console.log(\"engine.js:setSolids\");\n"
"  native.solids_clear();\n"
"  solids.forEach(native.solids_push);\n"
"};\n"
"\n"
"exports.setPushables = pushTable => {\n"
"  console.log(\"engine.js:setPushables\");\n"
"  native.push_table_clear();\n"
"  for (const [pusher, pushesList] of Object.entries(pushTable))\n"
"    for (const pushes of pushesList)\n"
"      native.push_table_set(pusher, pushes);\n"
"};\n"
"\n"
"let afterInputs = [];\n"
"exports.afterInput = fn => (console.log('afterInputs'), afterInputs.push(fn));\n"
"\n"
"const button = {\n"
"  pinToHandlers: {\n"
"     \"5\": [],\n"
"     \"7\": [],\n"
"     \"6\": [],\n"
"     \"8\": [],\n"
"    \"12\": [],\n"
"    \"14\": [],\n"
"    \"13\": [],\n"
"    \"15\": [],\n"
"  },\n"
"  keyToPin: {\n"
"    \"w\":  \"5\",\n"
"    \"s\":  \"7\",\n"
"    \"a\":  \"6\",\n"
"    \"d\":  \"8\",\n"
"    \"i\": \"12\",\n"
"    \"k\": \"14\",\n"
"    \"j\": \"13\",\n"
"    \"l\": \"15\",\n"
"  }\n"
"};\n"
"\n"
"native.press_cb(pin => {\n"
"  console.log(\"in press_cb js!\");\n"
"  button.pinToHandlers[pin].forEach(f => f());\n"
"\n"
"  afterInputs.forEach(f => f());\n"
"\n"
"  native.map_clear_deltas();\n"
"});\n"
"\n"
"exports.onInput = (key, fn) => {\n"
"  console.log(\"engine.js:onInput\");\n"
"  const pin = button.keyToPin[key];\n"
"\n"
"  if (pin === undefined)\n"
"    throw new Error(`the sprig doesn't have a \"${key}\" button!`);\n"
"\n"
"  button.pinToHandlers[pin].push(fn);\n"
"};\n"
"\n"
"exports.playTune = () => {};\n"
"\n"
"function _makeTag(cb) {\n"
"  return (strings, ...interps) => {\n"
"    if (typeof strings === \"string\") {\n"
"      throw new Error(\"Tagged template literal must be used like name`text`, instead of name(`text`)\");\n"
"    }\n"
"    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');\n"
"    return cb(string);\n"
"  }\n"
"}\n"
"exports.bitmap = _makeTag(text => text);\n"
"exports.tune = _makeTag(text => text);\n"
"exports.map = _makeTag(text => text);\n"
"return exports;\n"
"})();\n"
"/*\n"
"@title: Sokoban+\n"
"@author: Leonard (Omay)\n"
"\n"
"25 levels\n"
"3 types of boxes and 3 types of goals\n"
"\n"
"Press WASD to move, J to restart and K to toggle trails\n"
"Get A boxes (cyan) to A goals (green)\n"
"Get B boxes (magenta) to B goals (red)\n"
"Get normal boxes (gray) to either goal\n"
"*/\n"
"const player = \"p\";\n"
"const traila = \"t\";\n"
"const trailb = \"s\";\n"
"const boxa = \"c\";\n"
"const boxb = \"d\";\n"
"const boxn = \"e\";\n"
"const goala = \"a\";\n"
"const goalb = \"b\";\n"
"const goaln = \"o\";\n"
"const wall1 = \"0\";\n"
"const wall2 = \"1\";\n"
"const wall3 = \"2\";\n"
"const wall4 = \"3\";\n"
"const wall5 = \"4\";\n"
"const wall6 = \"5\";\n"
"const wall7 = \"6\";\n"
"const wall8 = \"7\";\n"
"const wall9 = \"8\";\n"
"const wall10 = \"9\";\n"
"const wall11 = \"u\";\n"
"const wall12 = \"v\";\n"
"const wall13 = \"w\";\n"
"const wall14 = \"x\";\n"
"const wall15 = \"y\";\n"
"const wall16 = \"z\";\n"
"const wall17 = \"f\";\n"
"const wall18 = \"g\";\n"
"const wall19 = \"h\";\n"
"const wall20 = \"i\";\n"
"const wall21 = \"j\";\n"
"const wall22 = \"k\";\n"
"const wall23 = \"l\";\n"
"const wall24 = \"m\";\n"
"const wall25 = \"n\";\n"
"setLegend(\n"
"  [player, bitmap`\n"
"................\n"
"................\n"
".....000000.....\n"
"....00....00....\n"
"...00......00...\n"
"...0..0..0..0...\n"
"...0........0...\n"
"...00..00..00...\n"
"....00....00....\n"
".....000000.....\n"
".....0....0.....\n"
".....0....0.....\n"
"...000....000...\n"
"................\n"
"................\n"
"................`],\n"
"  [traila, bitmap`\n"
"................\n"
"................\n"
".....LLLLLL.....\n"
"....LL....LL....\n"
"...LL......LL...\n"
"...L..L..L..L...\n"
"...L........L...\n"
"...LL..LL..LL...\n"
"....LL....LL....\n"
".....LLLLLL.....\n"
".....L....L.....\n"
".....L....L.....\n"
"...LLL....LLL...\n"
"................\n"
"................\n"
"................`],\n"
"  [trailb, bitmap`\n"
"................\n"
"................\n"
".....111111.....\n"
"....11....11....\n"
"...11......11...\n"
"...1..1..1..1...\n"
"...1........1...\n"
"...11..11..11...\n"
"....11....11....\n"
".....111111.....\n"
".....1....1.....\n"
".....1....1.....\n"
"...111....111...\n"
"................\n"
"................\n"
"................`],\n"
"  [boxa, bitmap`\n"
"................\n"
"................\n"
"..777777777777..\n"
"..7..........7..\n"
"..7..........7..\n"
"..7..........7..\n"
"..7....77....7..\n"
"..7...7..7...7..\n"
"..7...7777...7..\n"
"..7...7..7...7..\n"
"..7..........7..\n"
"..7..........7..\n"
"..7..........7..\n"
"..777777777777..\n"
"................\n"
"................`],\n"
"  [boxb, bitmap`\n"
"................\n"
"................\n"
"..888888888888..\n"
"..8..........8..\n"
"..8..........8..\n"
"..8....88....8..\n"
"..8....8.8...8..\n"
"..8....88....8..\n"
"..8....8.8...8..\n"
"..8....8.8...8..\n"
"..8....88....8..\n"
"..8..........8..\n"
"..8..........8..\n"
"..888888888888..\n"
"................\n"
"................`],\n"
"  [boxn, bitmap`\n"
"................\n"
"................\n"
"..LLLLLLLLLLLL..\n"
"..L....LL....L..\n"
"..L..1.LL..1.L..\n"
"..L.1..LL.1..L..\n"
"..L....LL....L..\n"
"..LLLLLLLLLLLL..\n"
"..LLLLLLLLLLLL..\n"
"..L....LL....L..\n"
"..L..1.LL..1.L..\n"
"..L.1..LL.1..L..\n"
"..L....LL....L..\n"
"..LLLLLLLLLLLL..\n"
"................\n"
"................`],\n"
"  [goala, bitmap`\n"
"................\n"
"................\n"
"................\n"
"......4444......\n"
"....444..444....\n"
"....4......4....\n"
"...44..44..44...\n"
"...4..4..4..4...\n"
"...4..4444..4...\n"
"...44.4..4.44...\n"
"....4......4....\n"
"....444..444....\n"
"......4444......\n"
"................\n"
"................\n"
"................`],\n"
"  [goalb, bitmap`\n"
"................\n"
"................\n"
"................\n"
"......3333......\n"
"....333..333....\n"
"....3..33..3....\n"
"...33..3.3.33...\n"
"...3...33...3...\n"
"...3...3.3..3...\n"
"...33..3.3.33...\n"
"....3..33..3....\n"
"....333..333....\n"
"......3333......\n"
"................\n"
"................\n"
"................`],\n"
"  [goaln, bitmap`\n"
"................\n"
"................\n"
"................\n"
"......LLLL......\n"
"....LLL..LLL....\n"
"....L......L....\n"
"...LL......LL...\n"
"...L........L...\n"
"...L........L...\n"
"...LL......LL...\n"
"....L......L....\n"
"....LLL..LLL....\n"
"......LLLL......\n"
"................\n"
"................\n"
"................`],\n"
"  [wall1, bitmap`\n"
"0000000000000000\n"
"0LLLLLLLLLLLLLL0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0LLLLLLLLLLLLLL0\n"
"0000000000000000`],\n"
"  [wall2, bitmap`\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0LLLLLLLLLLLLLL0\n"
"0000000000000000`],\n"
"  [wall3, bitmap`\n"
"0000000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall4, bitmap`\n"
"0000000000000000\n"
"0LLLLLLLLLLLLLL0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0`],\n"
"  [wall5, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLL0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"LLLLLLLLLLLLLLL0\n"
"0000000000000000`],\n"
"  [wall6, bitmap`\n"
"0L000000000000L0\n"
"0L000000000000LL\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall7, bitmap`\n"
"0000000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L000000000000LL\n"
"0L000000000000L0`],\n"
"  [wall8, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLL0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"LL000000000000L0\n"
"0L000000000000L0`],\n"
"  [wall9, bitmap`\n"
"0L000000000000L0\n"
"LL000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"LLLLLLLLLLLLLLL0\n"
"0000000000000000`],\n"
"  [wall10, bitmap`\n"
"0L000000000000L0\n"
"LL000000000000LL\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall11, bitmap`\n"
"0L000000000000L0\n"
"0L000000000000LL\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L000000000000LL\n"
"0L000000000000L0`],\n"
"  [wall12, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"LL000000000000LL\n"
"0L000000000000L0`],\n"
"  [wall13, bitmap`\n"
"0L000000000000L0\n"
"LL000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"LL000000000000L0\n"
"0L000000000000L0`],\n"
"  [wall14, bitmap`\n"
"0L000000000000L0\n"
"LL000000000000LL\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"LL000000000000LL\n"
"0L000000000000L0`],\n"
"  [wall15, bitmap`\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0\n"
"0L000000000000L0`],\n"
"  [wall16, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall17, bitmap`\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall18, bitmap`\n"
"0000000000000000\n"
"0LLLLLLLLLLLLLLL\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000`],\n"
"  [wall19, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLL0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0`],\n"
"  [wall20, bitmap`\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"LLLLLLLLLLLLLLL0\n"
"0000000000000000`],\n"
"  [wall21, bitmap`\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000`],\n"
"  [wall22, bitmap`\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000\n"
"0L00000000000000`],\n"
"  [wall23, bitmap`\n"
"0000000000000000\n"
"LLLLLLLLLLLLLLLL\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000`],\n"
"  [wall24, bitmap`\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0\n"
"00000000000000L0`],\n"
"  [wall25, bitmap`\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000\n"
"0000000000000000`],\n"
");\n"
"let level = 0;\n"
"const levels = [\n"
"  map`\n"
"pc.a`,\n"
"  map`\n"
"p..\n"
".c.\n"
"..a`,\n"
"  map`\n"
"p..a\n"
".c..\n"
"....\n"
"....`,\n"
"  map`\n"
"p...\n"
"...c\n"
"...c\n"
".cca`,\n"
"  map`\n"
"cc..\n"
"..c.\n"
".cp.\n"
".cca`,\n"
"  map`\n"
"p.y.\n"
".c1a\n"
"....\n"
"....`,\n"
"  map`\n"
"p.y.\n"
".c1a\n"
"....\n"
"..ca`,\n"
"  map`\n"
"....a\n"
".cc2z\n"
"4....\n"
"a...p`,\n"
"  map`\n"
"p.ca\n"
".gll\n"
"dknn\n"
"bknn`,\n"
"  map`\n"
"a..p\n"
"h.3d\n"
"mc1.\n"
"mp.b`,\n"
"  map`\n"
"...yb\n"
".0.1.\n"
".ca.d\n"
".3.0.\n"
"py...`,\n"
"  map`\n"
".ay.p\n"
"..ydc\n"
"b.y.a\n"
"dcy..\n"
"p.yb.`,\n"
"  map`\n"
"..k\n"
"..f\n"
"aca\n"
".c.\n"
".3.\n"
"c1.\n"
"a.p`,\n"
"  map`\n"
"b..y..a\n"
".d.y.c.\n"
"..pyp..\n"
"zzzxzzz\n"
"..pyp..\n"
".c.y.d.\n"
"a..y..b`,\n"
"  map`\n"
"p....\n"
"..d..\n"
"..e.b\n"
".....\n"
"..a..`,\n"
"  map`\n"
"p....\n"
"..dba\n"
".c.e.\n"
"..a.e\n"
"..b..`,\n"
"  map`\n"
"....\n"
"...b\n"
".0.2\n"
"..ca\n"
"lhe2\n"
"nm.p`,\n"
"  map`\n"
"p....\n"
".c.e.\n"
".....\n"
"z4.2z\n"
".....\n"
"..o..`,\n"
"  map`\n"
"an.p..n\n"
"cnn.n..\n"
"....nnn\n"
"nnn.n.n\n"
".......\n"
".nnnnn.\n"
".canac.`,\n"
"  map`\n"
"p...\n"
"..ce\n"
".caa\n"
".ebb`,\n"
"  map`\n"
"afip\n"
"..e.\n"
".d..\n"
"pghb`,\n"
"  map`\n"
"...p\n"
"ee..\n"
"abc.\n"
"bac.`,\n"
"  map`\n"
"p.p.p\n"
"eeeee\n"
".p.p.\n"
"ooooo\n"
".....`,\n"
"  map`\n"
"pe..op\n"
"ogllhe\n"
".knnm.\n"
".knnm.\n"
"efjjio\n"
"po..ep`,\n"
"  map`\n"
".......p\n"
"..cddc..\n"
".cabaac.\n"
".dbbabd.\n"
".daabbd.\n"
".cabbac.\n"
"..cddc..\n"
"........`,\n"
"  map`\n"
"gllllh\n"
"knnnnm\n"
"knnnnm\n"
"knnnnm\n"
"knnnnm\n"
"fjjjji`\n"
"];\n"
"const currentLevel = levels[level];\n"
"setMap(currentLevel);\n"
"setSolids([player, boxa, boxb, boxn, wall1, wall2, wall3, wall4, wall5, wall6, wall7, wall8, wall9, wall10, wall11, wall12, wall13, wall14, wall15, wall16, wall17, wall18, wall19, wall11, wall20, wall21, wall22, wall23, wall24, wall25]);\n"
"setPushables({\n"
"  [player]: [boxa, boxb, boxn],\n"
"  [boxa]: [boxa, boxb, boxn],\n"
"  [boxb]: [boxa, boxb, boxn],\n"
"  [boxn]: [boxa, boxb, boxn]\n"
"});\n"
"const playerstep = tune`\n"
"166.66666666666666,\n"
"166.66666666666666: a4^166.66666666666666,\n"
"5000`;\n"
"const bg = tune`\n"
"379.746835443038: d4^379.746835443038 + c5~379.746835443038,\n"
"379.746835443038: b4~379.746835443038 + e4^379.746835443038 + g5/379.746835443038,\n"
"379.746835443038: c5~379.746835443038,\n"
"379.746835443038: d5~379.746835443038 + f4^379.746835443038 + b5/379.746835443038,\n"
"379.746835443038: e5~379.746835443038 + g5/379.746835443038,\n"
"379.746835443038: e4^379.746835443038 + a5/379.746835443038,\n"
"379.746835443038: d5~379.746835443038,\n"
"379.746835443038: c5~379.746835443038 + d4^379.746835443038 + g5/379.746835443038,\n"
"379.746835443038: b4~379.746835443038,\n"
"379.746835443038: b5/379.746835443038,\n"
"379.746835443038: g5/379.746835443038,\n"
"379.746835443038: b4~379.746835443038 + f4^379.746835443038 + a5/379.746835443038,\n"
"379.746835443038: c5~379.746835443038,\n"
"379.746835443038: d5~379.746835443038 + e4^379.746835443038,\n"
"379.746835443038: g5/379.746835443038,\n"
"379.746835443038: b4~379.746835443038 + d4^379.746835443038 + b5/379.746835443038,\n"
"379.746835443038: a4~379.746835443038 + g5/379.746835443038,\n"
"379.746835443038: g4~379.746835443038 + c4^379.746835443038 + a5/379.746835443038,\n"
"379.746835443038: g5/379.746835443038 + a4~379.746835443038 + d4^379.746835443038,\n"
"379.746835443038: g4~379.746835443038,\n"
"379.746835443038: g5/379.746835443038 + e4^379.746835443038,\n"
"379.746835443038: a4~379.746835443038,\n"
"379.746835443038: b5/379.746835443038 + f4^379.746835443038 + b4~379.746835443038,\n"
"379.746835443038: g5/379.746835443038 + c5~379.746835443038,\n"
"379.746835443038: a5/379.746835443038 + e4^379.746835443038 + d5~379.746835443038,\n"
"379.746835443038,\n"
"379.746835443038: d4^379.746835443038 + c5~379.746835443038,\n"
"379.746835443038: g5/379.746835443038 + b4~379.746835443038,\n"
"379.746835443038: c4^379.746835443038 + a4~379.746835443038,\n"
"379.746835443038: b5/379.746835443038 + d4^379.746835443038,\n"
"379.746835443038: g5/379.746835443038 + e4^379.746835443038 + a4~379.746835443038,\n"
"379.746835443038: a5/379.746835443038 + f4^379.746835443038 + b4~379.746835443038`;\n"
"const reset = tune`\n"
"166.66666666666666,\n"
"166.66666666666666: c5-166.66666666666666,\n"
"166.66666666666666: b4-166.66666666666666,\n"
"4833.333333333333`;\n"
"const cont = tune`\n"
"500,\n"
"500: c5~500,\n"
"500: d5~500,\n"
"500: e5~500,\n"
"14000`;\n"
"const win = tune`\n"
"166.66666666666666,\n"
"166.66666666666666: c5~166.66666666666666,\n"
"166.66666666666666: d5~166.66666666666666,\n"
"166.66666666666666: e5~166.66666666666666,\n"
"166.66666666666666: b4~166.66666666666666,\n"
"166.66666666666666: c5~166.66666666666666,\n"
"166.66666666666666: d5~166.66666666666666,\n"
"166.66666666666666: e5~166.66666666666666,\n"
"166.66666666666666: d5~166.66666666666666,\n"
"166.66666666666666: c5~166.66666666666666,\n"
"166.66666666666666,\n"
"166.66666666666666: b4~166.66666666666666,\n"
"166.66666666666666: e5~166.66666666666666,\n"
"166.66666666666666: c5~166.66666666666666,\n"
"3000`;\n"
"playTune(bg, Infinity);\n"
"\n"
"let trails = true;\n"
"// START - PLAYER MOVEMENT CONTROLS\n"
"function everyMove() {\n"
"  let trailsb = getAll(trailb);\n"
"  for (let i of trailsb) {\n"
"    i.remove();\n"
"  }\n"
"  let trailsa = getAll(traila);\n"
"  for (i of trailsa) {\n"
"    i.type = trailb;\n"
"  }\n"
"  for(let i of getAll(player)){\n"
"    if(trails){\n"
"      addSprite(i.x, i.y, traila);\n"
"    }\n"
"  }\n"
"  playTune(playerstep);\n"
"}\n"
"let players;\n"
"let i;\n"
"onInput(\"s\", () => {\n"
"  players = getAll(player);\n"
"  everyMove();\n"
"  for (i of players) {\n"
"    i.y += 1;\n"
"  }\n"
"});\n"
"onInput(\"d\", () => {\n"
"  players = getAll(player);\n"
"  everyMove();\n"
"  for (i of players) {\n"
"    i.x += 1;\n"
"  }\n"
"});\n"
"onInput(\"w\", () => {\n"
"  players = getAll(player);\n"
"  everyMove();\n"
"  for (i of players) {\n"
"    i.y -= 1;\n"
"  }\n"
"});\n"
"onInput(\"a\", () => {\n"
"  players = getAll(player);\n"
"  everyMove();\n"
"  for (i of players) {\n"
"    i.x -= 1;\n"
"  }\n"
"});\n"
"// END - PLAYER MOVEMENT CONTROLS\n"
"onInput(\"j\", () => {\n"
"  const currentLevel = levels[level];\n"
"  playTune(reset);\n"
"  if (currentLevel !== undefined) {\n"
"    clearText(\"\");\n"
"    setMap(currentLevel);\n"
"  }\n"
"});\n"
"onInput(\"k\", () => {\n"
"  let trailsb = getAll(trailb);\n"
"  let trailsa = getAll(traila);\n"
"  for(let i of trailsa){\n"
"    i.remove();\n"
"  }\n"
"  for(let i of trailsb){\n"
"    i.remove();\n"
"  }\n"
"  trails = !trails;\n"
"});\n"
"afterInput(() => {\n"
"  const targetNumber = tilesWith(goala).length + tilesWith(goalb).length + tilesWith(goaln).length;\n"
"  const numberCovered = tilesWith(goala, boxa).length + tilesWith(goalb, boxb).length + tilesWith(goala, boxn).length + tilesWith(goalb, boxn).length + tilesWith(goaln, boxa).length + tilesWith(goaln, boxb).length + tilesWith(goaln, boxn).length;\n"
"  if (numberCovered === targetNumber) {\n"
"    level = level + 1;\n"
"    const currentLevel = levels[level];\n"
"    playTune(cont);\n"
"    setMap(currentLevel);\n"
"    if (level === levels.length-1) {\n"
"      addText(\"You win!\", {\n"
"        y: 4,\n"
"        color: [0, 255, 0]\n"
"      });\n"
"      playTune(win);\n"
"    }\n"
"  }\n"
"});\n"
