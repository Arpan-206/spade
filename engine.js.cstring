"let setTimeout, setInterval;\n"
"const {\n"
"  /* sprite interactions */ setSolids, setPushables,\n"
"  /*              see also: sprite.x +=, sprite.y += */\n"
"\n"
"  /* art */ setLegend, setBackground,\n"
"  /* text */ addText, clearText,\n"
"\n"
"  /*   spawn sprites */ setMap, addSprite,\n"
"  /* despawn sprites */ clearTile, /* sprite.remove() */\n"
"\n"
"  /* tile queries */ getGrid, getTile, getFirst, getAll, tilesWith,\n"
"  /* see also: sprite.type */\n"
"\n"
"  /* map dimensions */ width, height,\n"
"\n"
"  /* constructors */ bitmap, tune, map,\n"
"\n"
"  /* input handling */ onInput, afterInput,\n"
"\n"
"  /* how much sprite has moved since last onInput: sprite.dx, sprite.dy */\n"
"\n"
"  playTune,\n"
"} = (() => {\n"
"const exports = {};\n"
"/* re-exports from C; bottom of module_native.c has notes about why these are in C */\n"
"exports.setMap = map => native.setMap(map.trim());\n"
"exports.addSprite = native.addSprite;\n"
"exports.getGrid = native.getGrid;\n"
"exports.getTile = native.getTile;\n"
"exports.tilesWith = native.tilesWith;\n"
"exports.clearTile = native.clearTile;\n"
"exports.getFirst = native.getFirst;\n"
"exports.getAll = native.getAll;\n"
"exports.width = native.width;\n"
"exports.height = native.height;\n"
"exports.setBackground = native.setBackground;\n"
"\n"
"\n"
"/* opts: x, y, color (all optional) */\n"
"exports.addText = (str, opts={}) => {\n"
"  console.log(\"engine.js:addText\");\n"
"  const CHARS_MAX_X = 21;\n"
"  const padLeft = Math.floor((CHARS_MAX_X - str.length)/2);\n"
"\n"
"  native.text_add(\n"
"    str,\n"
"    opts.color ?? [10, 10, 40],\n"
"    opts.x ?? padLeft,\n"
"    opts.y ?? 0\n"
"  );\n"
"}\n"
"\n"
"exports.clearText = () => native.text_clear();\n"
"\n"
"\n"
"exports.setLegend = (...bitmaps) => {\n"
"  console.log(\"engine.js:setLegend\");\n"
"  native.legend_clear();\n"
"  for (const [charStr, bitmap] of bitmaps) {\n"
"    native.legend_doodle_set(charStr, bitmap.trim());\n"
"  }\n"
"  native.legend_prepare();\n"
"};\n"
"\n"
"exports.setSolids = solids => {\n"
"  console.log(\"engine.js:setSolids\");\n"
"  native.solids_clear();\n"
"  solids.forEach(native.solids_push);\n"
"};\n"
"\n"
"exports.setPushables = pushTable => {\n"
"  console.log(\"engine.js:setPushables\");\n"
"  native.push_table_clear();\n"
"  for (const [pusher, pushesList] of Object.entries(pushTable))\n"
"    for (const pushes of pushesList)\n"
"      native.push_table_set(pusher, pushes);\n"
"};\n"
"\n"
"let afterInputs = [];\n"
"exports.afterInput = fn => (console.log('engine.js:afterInputs'), afterInputs.push(fn));\n"
"\n"
"const button = {\n"
"  pinToHandlers: {\n"
"     \"5\": [],\n"
"     \"7\": [],\n"
"     \"6\": [],\n"
"     \"8\": [],\n"
"    \"12\": [],\n"
"    \"14\": [],\n"
"    \"13\": [],\n"
"    \"15\": [],\n"
"  },\n"
"  keyToPin: {\n"
"    \"w\":  \"5\",\n"
"    \"s\":  \"7\",\n"
"    \"a\":  \"6\",\n"
"    \"d\":  \"8\",\n"
"    \"i\": \"12\",\n"
"    \"k\": \"14\",\n"
"    \"j\": \"13\",\n"
"    \"l\": \"15\",\n"
"  }\n"
"};\n"
"\n"
"native.press_cb(pin => {\n"
"  button.pinToHandlers[pin].forEach(f => f());\n"
"\n"
"  afterInputs.forEach(f => f());\n"
"\n"
"  native.map_clear_deltas();\n"
"});\n"
"\n"
"let timers = [];\n"
"setTimeout  = (fn, ms) => timers.push({ fn, ms });\n"
"setInterval = (fn, ms) => timers.push({ fn, ms, restartAt: ms });\n"
"native.frame_cb(dt_secs => {\n"
"  const dt = dt_secs * 1000;\n"
"  timers = timers.filter(tim => {\n"
"    if (tim.ms <= 0) {\n"
"      tim.fn();\n"
"      if (tim.restartAt !== undefined)\n"
"        tim.ms = tim.restartAt;\n"
"      else\n"
"        return false;\n"
"    }\n"
"    tim.ms -= dt;\n"
"    return true;\n"
"  });\n"
"});\n"
"\n"
"exports.onInput = (key, fn) => {\n"
"  console.log(\"engine.js:onInput\");\n"
"  const pin = button.keyToPin[key];\n"
"\n"
"  if (pin === undefined)\n"
"    throw new Error(`the sprig doesn't have a \"${key}\" button!`);\n"
"\n"
"  button.pinToHandlers[pin].push(fn);\n"
"};\n"
"\n"
"exports.playTune = () => {};\n"
"\n"
"function _makeTag(cb) {\n"
"  return (strings, ...interps) => {\n"
"    if (typeof strings === \"string\") {\n"
"      throw new Error(\"Tagged template literal must be used like name`text`, instead of name(`text`)\");\n"
"    }\n"
"    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');\n"
"    return cb(string);\n"
"  }\n"
"}\n"
"exports.bitmap = _makeTag(text => text);\n"
"exports.tune = _makeTag(text => text);\n"
"exports.map = _makeTag(text => text);\n"
"return exports;\n"
"})();\n"
"/*\n"
"@title: 3072: A 2048 Spin-Off\n"
"@author: sahitid\n"
"\n"
"Why play 2048 when it's the same basic game you've been playing for years?\n"
"Why don't you move on to a better version? A more intuitive version?\n"
"I present to you... 3072!\n"
"\n"
"Controls:\n"
"Use the a, w, d, and s keys to move left, up, right, and down!\n"
"Instructions:\n"
"2048 is a game where you combine the sums of numbered tiles in order to gain a higher numbered tile.\n"
"This is a spin-off of that game. Try your best to get to 3072 and win the game. Good Luck!\n"
"\n"
"Press k to reset game.\n"
"Press l for music.\n"
"Press j to end music.\n"
"Press i for instructions and credits.\n"
"*/\n"
"const blank = \"-\"\n"
"const three = \"a\";\n"
"const six = \"b\";\n"
"const twelve = \"c\";\n"
"const twentyFour = \"d\";\n"
"const fortyEight = \"e\";\n"
"const ninetySix = \"f\";\n"
"const oneNinetyTwo = \"g\";\n"
"const threeEightyFour = \"h\";\n"
"const sevenSixtyEight = \"i\";\n"
"const fifteenThirtySix = \"j\";\n"
"const thirtySeventyTwo = \"k\";\n"
"\n"
"const tileOrder = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"];\n"
"\n"
"setLegend(\n"
"  [ blank, bitmap`\n"
"1111111111111111\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1222222222222221\n"
"1111111111111111`],\n"
"  [ three, bitmap`\n"
"1111111111111111\n"
"1222222222222221\n"
"1222211111222221\n"
"1222112221122221\n"
"1222122222122221\n"
"1222122222122221\n"
"1222222222122221\n"
"1222222221122221\n"
"1222221111222221\n"
"1222222221122221\n"
"1222222222122221\n"
"1222122222122221\n"
"1222112221122221\n"
"1222211111222221\n"
"1222222222222221\n"
"1111111111111111`],\n"
"  [ six, bitmap`\n"
"1111111111111111\n"
"1222222222222221\n"
"122222LLLL222221\n"
"12222LL22LL22221\n"
"12222L2222L22221\n"
"1222LL2222222221\n"
"1222L22222222221\n"
"1222L2LLLL222221\n"
"1222LLL22LL22221\n"
"1222LL2222LL2221\n"
"1222L222222L2221\n"
"1222LL2222LL2221\n"
"12222LL22LL22221\n"
"122222LLLL222221\n"
"1222222222222221\n"
"1111111111111111`],\n"
"  [ twelve, bitmap`\n"
"1111111111111111\n"
"1666666666666661\n"
"1666666666666661\n"
"1666266622226661\n"
"1666266266622661\n"
"1666266266662661\n"
"1666266666622661\n"
"1666266666226661\n"
"1666266662266661\n"
"1666266622666661\n"
"1666266226666661\n"
"1666266266666661\n"
"1666266222222661\n"
"1666666666666661\n"
"1666666666666661\n"
"1111111111111111`],\n"
"  [ twentyFour, bitmap`\n"
"1111111111111111\n"
"1999999999999991\n"
"1999999999999991\n"
"1992222999992291\n"
"1922999299922291\n"
"1929999299929291\n"
"1999999299229291\n"
"1999992292299291\n"
"1999922992222221\n"
"1999929999999291\n"
"1999299999999291\n"
"1992299999999291\n"
"1922999999999291\n"
"1922222299999291\n"
"1999999999999991\n"
"1111111111111111`],\n"
"  [ fortyEight, bitmap`\n"
"1111111111111111\n"
"1333333333333331\n"
"1333333333333331\n"
"1333322333222331\n"
"1333222332333231\n"
"1332232332333231\n"
"1322332332333231\n"
"1323332332333231\n"
"1322222233222331\n"
"1333332332333231\n"
"1333332332333231\n"
"1333332332333231\n"
"1333332332333231\n"
"1333332333222331\n"
"1333333333333331\n"
"1111111111111111`],\n"
"  [ ninetySix, bitmap`\n"
"1111111111111111\n"
"1CCCCCCCCCCCCCC1\n"
"1CCCCCCCCCCCCCC1\n"
"1CC222CCCC222CC1\n"
"1C2CCC2CC2CCCCC1\n"
"1C2CCC2CC2CCCCC1\n"
"1C2CCC2CC2CCCCC1\n"
"1C2CCC2CC2CCCCC1\n"
"1CC2222CCC222CC1\n"
"1CCCCC2CC2CCC2C1\n"
"1CCCCC2CC2CCC2C1\n"
"1CCCCC2CC2CCC2C1\n"
"1CCCCC2CC2CCC2C1\n"
"1CCCCC2CCC222CC1\n"
"1CCCCCCCCCCCCCC1\n"
"1111111111111111`],\n"
"  [ oneNinetyTwo, bitmap`\n"
"1111111111111111\n"
"1FFFFFFFFFFFFFF1\n"
"1F2FF22FFF222FF1\n"
"1F2F2FF2F22FF2F1\n"
"1F2F2FF2F2FFF2F1\n"
"1F2F2FF2F2FFF2F1\n"
"1F2F2FF2FFFFF2F1\n"
"1F2FF222FFFF22F1\n"
"1F2FFFF2FFF22FF1\n"
"1F2FFFF2FF22FFF1\n"
"1F2FFFF2F22FFFF1\n"
"1F2FFFF2F2FFFFF1\n"
"1F2FFFF2F2FFFFF1\n"
"1F2FFFF2F22222F1\n"
"1FFFFFFFFFFFFFF1\n"
"1111111111111111`],\n"
"  [ threeEightyFour, bitmap`\n"
"1111111111111111\n"
"1777777777777771\n"
"1227772277777271\n"
"1772727727772271\n"
"1772727727727271\n"
"1772727727727271\n"
"1772727727277271\n"
"1772772277222221\n"
"1227727727777271\n"
"1772727727777271\n"
"1772727727777271\n"
"1772727727777271\n"
"1772727727777271\n"
"1227772277777271\n"
"1777777777777771\n"
"1111111111111111`],\n"
"  [ sevenSixtyEight, bitmap`\n"
"1111111111111111\n"
"1555555555555551\n"
"1555555555555551\n"
"1522555222552251\n"
"1255252552525521\n"
"1255252555525521\n"
"1555252555525521\n"
"1555252555525521\n"
"1555252222552251\n"
"1555252552525521\n"
"1555252552525521\n"
"1555252552525521\n"
"1555252552525521\n"
"1555255225552251\n"
"1555555555555551\n"
"1111111111111111`],\n"
"  [ fifteenThirtySix, bitmap`\n"
"1111111111111111\n"
"1HHHHHHHHHHHHHH1\n"
"1HH22HHHH2222HH1\n"
"1HHH2HHHH2HHHHH1\n"
"1HHH2HHHH222HHH1\n"
"1HHH2HHHHHHH2HH1\n"
"1HH222HHH222HHH1\n"
"1HHHHHHHHHHHHHH1\n"
"1HHHHHHHHHHHHHH1\n"
"1HH222HHHH222HH1\n"
"1HHHHH2HH2HHHHH1\n"
"1HH2222HH222HHH1\n"
"1HHHHH2HH2HH2HH1\n"
"1HH222HHHH22HHH1\n"
"1HHHHHHHHHHHHHH1\n"
"1111111111111111`],\n"
"  [ thirtySeventyTwo, bitmap`\n"
"1111111111111111\n"
"1888888888888881\n"
"1882228888228881\n"
"1888882882882881\n"
"1882228882882881\n"
"1888882882882881\n"
"1888882882882881\n"
"1882228888228881\n"
"1888888888888881\n"
"1888228888228881\n"
"1882882882882881\n"
"1888882888822881\n"
"1888882888288881\n"
"1888882882222881\n"
"1888888888888881\n"
"1111111111111111`]\n"
");\n"
"\n"
"// Music controls\n"
"const melody = tune`\n"
"294.11764705882354: a4~294.11764705882354 + g4~294.11764705882354,\n"
"294.11764705882354: g4~294.11764705882354 + f4^294.11764705882354,\n"
"294.11764705882354: b4~294.11764705882354 + g4~294.11764705882354,\n"
"294.11764705882354: c5~294.11764705882354 + g4~294.11764705882354 + a4~294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354,\n"
"294.11764705882354: c5~294.11764705882354 + g4^294.11764705882354,\n"
"294.11764705882354,\n"
"294.11764705882354: d5^294.11764705882354 + a4~294.11764705882354 + b4~294.11764705882354,\n"
"294.11764705882354: b4~294.11764705882354,\n"
"294.11764705882354: d5~294.11764705882354,\n"
"294.11764705882354,\n"
"294.11764705882354: b4~294.11764705882354 + f4~294.11764705882354,\n"
"294.11764705882354: g4~294.11764705882354 + f4^294.11764705882354,\n"
"294.11764705882354: c5~294.11764705882354 + g4~294.11764705882354,\n"
"294.11764705882354: a4^294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354,\n"
"294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354 + g4~294.11764705882354,\n"
"294.11764705882354: f4~294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354 + b4^294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354 + b4~294.11764705882354,\n"
"294.11764705882354: e4~294.11764705882354 + g4~294.11764705882354,\n"
"294.11764705882354: d5~294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354 + b4~294.11764705882354,\n"
"294.11764705882354: f4~294.11764705882354 + a4^294.11764705882354,\n"
"294.11764705882354: d5~294.11764705882354,\n"
"294.11764705882354: g5~294.11764705882354 + b4~294.11764705882354 + f5^294.11764705882354,\n"
"294.11764705882354: d5~294.11764705882354,\n"
"294.11764705882354: a4~294.11764705882354,\n"
"294.11764705882354: c5~294.11764705882354 + a4^294.11764705882354,\n"
"294.11764705882354: e4~294.11764705882354 + a4~294.11764705882354,\n"
"294.11764705882354: f4^294.11764705882354`\n"
"\n"
"let playback;\n"
"\n"
"onInput(\"l\", () => {\n"
"  playback = playTune(melody, Infinity);\n"
"});\n"
"\n"
"onInput(\"j\", () => {\n"
"  playback.end();\n"
"});\n"
"\n"
"//Instructions\n"
"onInput(\"i\", () => {\n"
"  clearText();\n"
"  prepBoard();\n"
"  \n"
"  setMap(levels[level]);\n"
"  addText(`2048 Game`, {y:1, color: [245, 109, 187, 255 ] });\n"
"  addText(`To Move:`, {y:3, color: [19, 21, 224, 255] });\n"
"  addText(`W, A, S, D`, {y:4, color: [245, 109, 187, 255 ] });\n"
"  addText(`Other Controls`, {y:6, color: [19, 21, 224, 255] });\n"
"  addText(`I for help`, {y:8, color: [0, 0, 0, 255 ] });\n"
"  addText(`K to reset level`, {y:9, color: [0, 0, 0, 255] });\n"
"  addText(`L to start music`, {y:10, color: [0, 0, 0, 255] });\n"
"  addText(`J to end music`, {y:11, color: [0, 0, 0, 255 ] });\n"
"  addText(`Credits:`, {y:13, color: [19, 21, 224, 255 ] });\n"
"  addText(`by @sahitid`, {y:14, color: [245, 109, 187, 255 ] });\n"
"  \n"
"});\n"
"\n"
"//setSolids([player, wall]);\n"
"\n"
"let level = 0;\n"
"const levels = [\n"
"  map`\n"
"----\n"
"----\n"
"----\n"
"----`,\n"
"];\n"
"\n"
"let isGameOver = false;\n"
"prepBoard();\n"
"\n"
"//setPushables({ \n"
"//   [player]: [ block, player ] \n"
"//})\n"
"\n"
"let changeBoard = false;\n"
"onInput(\"w\", () => {\n"
"  if (isGameOver) return;\n"
"  \n"
"  for (let x=0; x<=3; x++) {  \n"
"    let nextFilledY = 0;\n"
"    for (let y=1; y<=3; y++) {\n"
"      switch (getTile(x,y)[0].type) {\n"
"        case blank:\n"
"          break;\n"
"        case (getTile(x,nextFilledY)[0].type):\n"
"          clearTile(x,nextFilledY);\n"
"          addSprite(x,nextFilledY,tileOrder[tileOrder.indexOf(getTile(x,y)[0].type)+1]);\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          changeBoard = true;\n"
"          break;\n"
"        default:\n"
"          if (!(nextFilledY===0 && getTile(x,nextFilledY)[0].type===blank))\n"
"            nextFilledY++;\n"
"          let currentType = getTile(x,y)[0].type;\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          clearTile(x,nextFilledY);\n"
"          addSprite(x,nextFilledY,currentType);\n"
"          if (y !== nextFilledY) changeBoard = true;\n"
"          break;\n"
"      }\n"
"    }\n"
"  }\n"
"});\n"
"\n"
"onInput(\"s\", () => {\n"
"  if (isGameOver) return;\n"
"  \n"
"  for (let x=0; x<=3; x++) {  \n"
"    let nextFilledY = 3;\n"
"    for (let y=2; y>=0; y--) {\n"
"      switch (getTile(x,y)[0].type) {\n"
"        case blank:\n"
"          break;\n"
"        case (getTile(x,nextFilledY)[0].type):\n"
"          clearTile(x,nextFilledY);\n"
"          addSprite(x,nextFilledY,tileOrder[tileOrder.indexOf(getTile(x,y)[0].type)+1]);\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          changeBoard = true;\n"
"          break;\n"
"        default:\n"
"          if (!(nextFilledY===3 && getTile(x,nextFilledY)[0].type===blank))\n"
"            nextFilledY--;\n"
"          let currentType = getTile(x,y)[0].type;\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          clearTile(x,nextFilledY);\n"
"          addSprite(x,nextFilledY,currentType)\n"
"          if (y !== nextFilledY) changeBoard = true;\n"
"          break;\n"
"      }\n"
"    }\n"
"  }\n"
"});\n"
"\n"
"onInput(\"d\", () => {\n"
"  if (isGameOver) return;\n"
"\n"
"  for (let y=0; y<=3; y++) {  \n"
"    let nextFilledX = 3;\n"
"    for (let x=2; x>=0; x--) {\n"
"      switch (getTile(x,y)[0].type) {\n"
"        case blank:\n"
"          break;\n"
"        case (getTile(nextFilledX,y)[0].type):\n"
"          clearTile(nextFilledX,y);\n"
"          addSprite(nextFilledX,y,tileOrder[tileOrder.indexOf(getTile(x,y)[0].type)+1]);\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          changeBoard = true;\n"
"          break;\n"
"        default:\n"
"          if (!(nextFilledX===3 && getTile(nextFilledX,y)[0].type===blank))\n"
"            nextFilledX--;\n"
"          let currentType = getTile(x,y)[0].type;\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          clearTile(nextFilledX,y);\n"
"          addSprite(nextFilledX,y,currentType)\n"
"          if (x !== nextFilledX) changeBoard = true;\n"
"          break;\n"
"      }\n"
"    }\n"
"  }\n"
"});\n"
"\n"
"onInput(\"a\", () => {\n"
"  if (isGameOver) return;\n"
"  \n"
"  for (let y=0; y<=3; y++) {  \n"
"    let nextFilledX = 0;\n"
"    for (let x=1; x<=3; x++) {\n"
"      switch (getTile(x,y)[0].type) {\n"
"        case blank:\n"
"          break;\n"
"        case (getTile(nextFilledX,y)[0].type):\n"
"          clearTile(nextFilledX,y);\n"
"          addSprite(nextFilledX,y,tileOrder[tileOrder.indexOf(getTile(x,y)[0].type)+1]);\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          changeBoard = true;\n"
"          break;\n"
"        default:\n"
"          if (!(nextFilledX===0 && getTile(nextFilledX,y)[0].type===blank))\n"
"            nextFilledX++;\n"
"          let currentType = getTile(x,y)[0].type;\n"
"          clearTile(x,y);\n"
"          addSprite(x,y,blank);\n"
"          clearTile(nextFilledX,y);\n"
"          addSprite(nextFilledX,y,currentType)\n"
"          if (x !== nextFilledX) changeBoard = true;\n"
"          break;\n"
"      }\n"
"    }\n"
"  }\n"
"});\n"
"\n"
"// restarting game\n"
"onInput(\"k\", () => {\n"
"  isGameOver = true;\n"
"  prepBoard();\n"
"});\n"
"\n"
"\n"
"afterInput(() => {\n"
"  if (checkGameOver()) {\n"
"    isGameOver = true;\n"
"    addText(\"Game over!\", { y: 4, color: [0, 0, 0] });\n"
"    addText(\"K to restart\", { y: 8, color: [0, 0, 0] });\n"
"    return;\n"
"  }\n"
"\n"
"  if (getAll(thirtySeventyTwo).length >= 1) {\n"
"    isGameOver = true;\n"
"    addText(\"You win!\", { y: 4, color: [0, 0, 0] });\n"
"    addText(\"K to restart\", { y: 8, color: [0, 0, 0] });\n"
"    return;\n"
"  }\n"
"  \n"
"  if (!isGameOver) {\n"
"    if (changeBoard) generateTile();\n"
"    changeBoard = false;\n"
"  }\n"
"});\n"
"\n"
"function prepBoard() {\n"
"  isGameOver = false;\n"
"  clearText(\"\");\n"
"  setMap(levels[level]);\n"
"  generateTile();\n"
"  generateTile();\n"
"}\n"
"\n"
"function generateTile() {\n"
"  if (getAll(blank).length===0) return;\n"
"  \n"
"  let blankTiles = tilesWith(blank);\n"
"  let random = Math.floor(Math.random() * (blankTiles.length-1+1));\n"
"  clearTile(blankTiles[random][0].x,blankTiles[random][0].y);\n"
"  addSprite(blankTiles[random][0].x,blankTiles[random][0].y,\"a\");\n"
"}\n"
"\n"
"function checkGameOver() {\n"
"  if (getAll(blank).length>0) return false;\n"
"  \n"
"  for (let x=0; x<=3; x++) {\n"
"    for (let y=1; y<=3; y++) {\n"
"      if (getTile(x,y)[0].type == getTile(x,y-1)[0].type) return false;\n"
"    }\n"
"  }\n"
"  \n"
"  for (let y=0; y<=3; y++) {\n"
"    for (let x=1; x<=3; x++) {\n"
"      if (getTile(x,y)[0].type == getTile(x-1,y)[0].type) return false;\n"
"    }\n"
"  }\n"
"\n"
"  return true;\n"
"}\n"
