"const {\n"
"  /* sprite interactions */ setSolids, setPushables,\n"
"  /*              see also: sprite.x +=, sprite.y += */\n"
"\n"
"  /* art */ setLegend, setBackground,\n"
"  /* text */ addText, clearText,\n"
"\n"
"  /*   spawn sprites */ setMap, addSprite,\n"
"  /* despawn sprites */ clearTile, /* sprite.remove() */\n"
"\n"
"  /* tile queries */ getGrid, getTile, getFirst, getAll, tilesWith,\n"
"  /* see also: sprite.type */\n"
"\n"
"  /* map dimensions */ width, height,\n"
"\n"
"  /* constructors */ bitmap, tune, map,\n"
"\n"
"  /* input handling */ onInput, afterInput,\n"
"\n"
"  /* how much sprite has moved since last onInput: sprite.dx, sprite.dy */\n"
"\n"
"  playTune,\n"
"} = (() => {\n"
"const exports = {};\n"
"/* re-exports from C; bottom of module_native.c has notes about why these are in C */\n"
"exports.setMap = map => native.setMap(map.trim());\n"
"exports.addSprite = native.addSprite;\n"
"exports.getGrid = native.getGrid;\n"
"exports.getTile = native.getTile;\n"
"exports.tilesWith = native.tilesWith;\n"
"exports.clearTile = native.clearTile;\n"
"exports.getFirst = native.getFirst;\n"
"exports.getAll = native.getAll;\n"
"exports.width = native.width;\n"
"exports.height = native.height;\n"
"exports.setBackground = native.setBackground;\n"
"\n"
"\n"
"/* opts: x, y, color (all optional) */\n"
"exports.addText = (str, opts={}) => {\n"
"  console.log(\"engine.js:addText\");\n"
"  const CHARS_MAX_X = 21;\n"
"  const padLeft = Math.floor((CHARS_MAX_X - str.length)/2);\n"
"\n"
"  native.text_add(\n"
"    str,\n"
"    opts.color ?? [10, 10, 40],\n"
"    opts.x ?? padLeft,\n"
"    opts.y ?? 0\n"
"  );\n"
"}\n"
"\n"
"exports.clearText = () => native.text_clear();\n"
"\n"
"\n"
"exports.setLegend = (...bitmaps) => {\n"
"  console.log(\"engine.js:setLegend\");\n"
"  native.legend_clear();\n"
"  for (const [charStr, bitmap] of bitmaps) {\n"
"    native.legend_doodle_set(charStr, bitmap.trim());\n"
"  }\n"
"  native.legend_prepare();\n"
"};\n"
"\n"
"exports.setSolids = solids => {\n"
"  console.log(\"engine.js:setSolids\");\n"
"  native.solids_clear();\n"
"  solids.forEach(native.solids_push);\n"
"};\n"
"\n"
"exports.setPushables = pushTable => {\n"
"  console.log(\"engine.js:setPushables\");\n"
"  native.push_table_clear();\n"
"  for (const [pusher, pushesList] of Object.entries(pushTable))\n"
"    for (const pushes of pushesList)\n"
"      native.push_table_set(pusher, pushes);\n"
"};\n"
"\n"
"let afterInputs = [];\n"
"exports.afterInput = fn => (console.log('afterInputs'), afterInputs.push(fn));\n"
"\n"
"const button = {\n"
"  pinToHandlers: {\n"
"     \"5\": [],\n"
"     \"7\": [],\n"
"     \"6\": [],\n"
"     \"8\": [],\n"
"    \"12\": [],\n"
"    \"14\": [],\n"
"    \"13\": [],\n"
"    \"15\": [],\n"
"  },\n"
"  keyToPin: {\n"
"    \"w\":  \"5\",\n"
"    \"s\":  \"7\",\n"
"    \"a\":  \"6\",\n"
"    \"d\":  \"8\",\n"
"    \"i\": \"12\",\n"
"    \"k\": \"14\",\n"
"    \"j\": \"13\",\n"
"    \"l\": \"15\",\n"
"  }\n"
"};\n"
"\n"
"native.press_cb(pin => {\n"
"  console.log(\"in press_cb js!\");\n"
"  button.pinToHandlers[pin].forEach(f => f());\n"
"\n"
"  afterInputs.forEach(f => f());\n"
"\n"
"  native.map_clear_deltas();\n"
"});\n"
"\n"
"exports.onInput = (key, fn) => {\n"
"  console.log(\"engine.js:onInput\");\n"
"  const pin = button.keyToPin[key];\n"
"\n"
"  if (pin === undefined)\n"
"    throw new Error(`the sprig doesn't have a \"${key}\" button!`);\n"
"\n"
"  button.pinToHandlers[pin].push(fn);\n"
"};\n"
"\n"
"exports.playTune = () => {};\n"
"\n"
"function _makeTag(cb) {\n"
"  return (strings, ...interps) => {\n"
"    if (typeof strings === \"string\") {\n"
"      throw new Error(\"Tagged template literal must be used like name`text`, instead of name(`text`)\");\n"
"    }\n"
"    const string = strings.reduce((p, c, i) => p + c + (interps[i] ?? ''), '');\n"
"    return cb(string);\n"
"  }\n"
"}\n"
"exports.bitmap = _makeTag(text => text);\n"
"exports.tune = _makeTag(text => text);\n"
"exports.map = _makeTag(text => text);\n"
"return exports;\n"
"})();\n"
"/*\n"
"@title: simple maze\n"
"@author: Itamar Davidyan\n"
"*/\n"
"\n"
"\n"
"const player = \"p\";\n"
"\n"
"const goal = \"g\";\n"
"const goalU = \"-\";\n"
"const goalD = \"_\";\n"
"const goalR = \"|\";\n"
"const goalL = \"]\";\n"
"const goalUD = \"[\";\n"
"const goalUR = \"{\";\n"
"const goalUL = \"}\";\n"
"const goalUDR = \":\";\n"
"const goalUDL = \";\";\n"
"const goalURL = \"+\";\n"
"const goalDR = \")\";\n"
"const goalDL = \"(\";\n"
"const goalDRL = \"?\";\n"
"const goalRL = \">\";\n"
"\n"
"const goals = [\n"
"  goal, goalU, goalD, goalR, goalL, goalUD, goalUR, goalUL, goalUDR,\n"
"  goalUDL, goalURL, goalDR, goalDL, goalDRL, goalRL\n"
"];\n"
"\n"
"const wallU = \"U\";\n"
"const wallD = \"D\";\n"
"const wallR = \"R\";\n"
"const wallL = \"L\";\n"
"const wallUD = \"1\";\n"
"const wallUR = \"2\";\n"
"const wallUL = \"3\";\n"
"const wallUDR = \"4\";\n"
"const wallUDL = \"5\";\n"
"const wallURL = \"6\";\n"
"const wallDR = \"7\";\n"
"const wallDL = \"8\";\n"
"const wallDRL = \"9\";\n"
"const wallRL = \"0\";\n"
"\n"
"setLegend(\n"
"  [ player, bitmap`\n"
"................\n"
"................\n"
"..000000000000..\n"
"..0..........0..\n"
"..0..........0..\n"
"..0..33..33..0..\n"
"..0..33..33..0..\n"
"..0..........0..\n"
"..0..0....0..0..\n"
"..0...0000...0..\n"
"...0........0...\n"
"....0......0....\n"
".....000000.....\n"
"................\n"
"................\n"
"................`],\n"
"  [ goal, bitmap`\n"
"................\n"
"................\n"
"..3..........3..\n"
"...3........3...\n"
"....3......3....\n"
".....3....3.....\n"
"......3..3......\n"
".......33.......\n"
".......33.......\n"
"......3..3......\n"
".....3....3.....\n"
"....3......3....\n"
"...3........3...\n"
"..3..........3..\n"
"................\n"
"................`],\n"
"  [ goalU, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"................\n"
"..3..........3..\n"
"...3........3...\n"
"....3......3....\n"
".....3....3.....\n"
"......3..3......\n"
".......33.......\n"
".......33.......\n"
"......3..3......\n"
".....3....3.....\n"
"....3......3....\n"
"...3........3...\n"
"..3..........3..\n"
"................\n"
"................`],\n"
"  [ goalD, bitmap`\n"
"................\n"
"................\n"
"..3..........3..\n"
"...3........3...\n"
"....3......3....\n"
".....3....3.....\n"
"......3..3......\n"
".......33.......\n"
".......33.......\n"
"......3..3......\n"
".....3....3.....\n"
"....3......3....\n"
"...3........3...\n"
"..3..........3..\n"
"................\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalR, bitmap`\n"
"...............L\n"
"...............L\n"
"..3..........3.L\n"
"...3........3..L\n"
"....3......3...L\n"
".....3....3....L\n"
"......3..3.....L\n"
".......33......L\n"
".......33......L\n"
"......3..3.....L\n"
".....3....3....L\n"
"....3......3...L\n"
"...3........3..L\n"
"..3..........3.L\n"
"...............L\n"
"...............L`],\n"
"  [ goalL, bitmap`\n"
"L...............\n"
"L...............\n"
"L.3..........3..\n"
"L..3........3...\n"
"L...3......3....\n"
"L....3....3.....\n"
"L.....3..3......\n"
"L......33.......\n"
"L......33.......\n"
"L.....3..3......\n"
"L....3....3.....\n"
"L...3......3....\n"
"L..3........3...\n"
"L.3..........3..\n"
"L...............\n"
"L...............`],\n"
"  [ goalUD, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"................\n"
"..3..........3..\n"
"...3........3...\n"
"....3......3....\n"
".....3....3.....\n"
"......3..3......\n"
".......33.......\n"
".......33.......\n"
"......3..3......\n"
".....3....3.....\n"
"....3......3....\n"
"...3........3...\n"
"..3..........3..\n"
"................\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalUR, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"...............L\n"
"..3..........3.L\n"
"...3........3..L\n"
"....3......3...L\n"
".....3....3....L\n"
"......3..3.....L\n"
".......33......L\n"
".......33......L\n"
"......3..3.....L\n"
".....3....3....L\n"
"....3......3...L\n"
"...3........3..L\n"
"..3..........3.L\n"
"...............L\n"
"...............L`],\n"
"  [ goalUL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L...............\n"
"L.3..........3..\n"
"L..3........3...\n"
"L...3......3....\n"
"L....3....3.....\n"
"L.....3..3......\n"
"L......33.......\n"
"L......33.......\n"
"L.....3..3......\n"
"L....3....3.....\n"
"L...3......3....\n"
"L..3........3...\n"
"L.3..........3..\n"
"L...............\n"
"L...............`],\n"
"  [ goalUDR, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"...............L\n"
"..3..........3.L\n"
"...3........3..L\n"
"....3......3...L\n"
".....3....3....L\n"
"......3..3.....L\n"
".......33......L\n"
".......33......L\n"
"......3..3.....L\n"
".....3....3....L\n"
"....3......3...L\n"
"...3........3..L\n"
"..3..........3.L\n"
"...............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalUDL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L...............\n"
"L.3..........3..\n"
"L..3........3...\n"
"L...3......3....\n"
"L....3....3.....\n"
"L.....3..3......\n"
"L......33.......\n"
"L......33.......\n"
"L.....3..3......\n"
"L....3....3.....\n"
"L...3......3....\n"
"L..3........3...\n"
"L.3..........3..\n"
"L...............\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalURL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L..............L\n"
"L.3..........3.L\n"
"L..3........3..L\n"
"L...3......3...L\n"
"L....3....3....L\n"
"L.....3..3.....L\n"
"L......33......L\n"
"L......33......L\n"
"L.....3..3.....L\n"
"L....3....3....L\n"
"L...3......3...L\n"
"L..3........3..L\n"
"L.3..........3.L\n"
"L..............L\n"
"L..............L`],\n"
"  [ goalDR, bitmap`\n"
"...............L\n"
"...............L\n"
"..3..........3.L\n"
"...3........3..L\n"
"....3......3...L\n"
".....3....3....L\n"
"......3..3.....L\n"
".......33......L\n"
".......33......L\n"
"......3..3.....L\n"
".....3....3....L\n"
"....3......3...L\n"
"...3........3..L\n"
"..3..........3.L\n"
"...............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalDL, bitmap`\n"
"L...............\n"
"L...............\n"
"L.3..........3..\n"
"L..3........3...\n"
"L...3......3....\n"
"L....3....3.....\n"
"L.....3..3......\n"
"L......33.......\n"
"L......33.......\n"
"L.....3..3......\n"
"L....3....3.....\n"
"L...3......3....\n"
"L..3........3...\n"
"L.3..........3..\n"
"L...............\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalDRL, bitmap`\n"
"L..............L\n"
"L..............L\n"
"L.3..........3.L\n"
"L..3........3..L\n"
"L...3......3...L\n"
"L....3....3....L\n"
"L.....3..3.....L\n"
"L......33......L\n"
"L......33......L\n"
"L.....3..3.....L\n"
"L....3....3....L\n"
"L...3......3...L\n"
"L..3........3..L\n"
"L.3..........3.L\n"
"L..............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ goalRL, bitmap`\n"
"L..............L\n"
"L..............L\n"
"L.3..........3.L\n"
"L..3........3..L\n"
"L...3......3...L\n"
"L....3....3....L\n"
"L.....3..3.....L\n"
"L......33......L\n"
"L......33......L\n"
"L.....3..3.....L\n"
"L....3....3....L\n"
"L...3......3...L\n"
"L..3........3..L\n"
"L.3..........3.L\n"
"L..............L\n"
"L..............L`],\n"
"  [ wallU, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................`],\n"
"  [ wallD, bitmap`\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallR, bitmap`\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L`],\n"
"  [ wallL, bitmap`\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............`],\n"
"  [ wallUD, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"................\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallUR, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L`],\n"
"  [ wallUL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............`],\n"
"  [ wallUDR, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallUDL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallURL, bitmap`\n"
"LLLLLLLLLLLLLLLL\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L`],\n"
"  [ wallDR, bitmap`\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"...............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallDL, bitmap`\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"L...............\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallDRL, bitmap`\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"LLLLLLLLLLLLLLLL`],\n"
"  [ wallRL, bitmap`\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L\n"
"L..............L`],\n"
");\n"
"\n"
"const upWalls = [\n"
"  goalU, goalUD, goalUR, goalUL, goalUDR, goalUDL, goalURL,\n"
"  wallU, wallUD, wallUR, wallUL, wallUDR, wallUDL, wallURL\n"
"];\n"
"const downWalls = [\n"
"  goalD, goalUD, goalUDR, goalUDL, goalDR, goalDL, goalDRL,\n"
"  wallD, wallUD, wallUDR, wallUDL, wallDR, wallDL, wallDRL\n"
"];\n"
"const rightWalls = [\n"
"  goalR, goalUR, goalUDR, goalURL, goalDR, goalDRL, goalRL,\n"
"  wallR, wallUR, wallUDR, wallURL, wallDR, wallDRL, wallRL\n"
"];\n"
"const leftWalls = [\n"
"  goalL, goalUL, goalUDL, goalURL, goalDL, goalDRL, goalRL,\n"
"  wallL, wallUL, wallUDL, wallURL, wallDL, wallDRL, wallRL\n"
"];\n"
"\n"
"let level = 0;\n"
"const levels = [\n"
"  map`\n"
".DD_\n"
"....\n"
"U11D\n"
"...p`,\n"
"  map`\n"
"DDD..\n"
".DD7.\n"
"..|..\n"
"U517.\n"
"p....`,\n"
"  map`\n"
".....\n"
".116.\n"
"DD.8.\n"
"DDDR.\n"
".DD7.\n"
"..|..\n"
"U517.\n"
"p....`,\n"
"  map`\n"
".......p\n"
".3U.33U}\n"
".6U8.L8D\n"
".L.R.LL.\n"
".L6R.L0.\n"
".L87.L0.\n"
".8DDD87.\n"
"........`,\n"
"  map`\n"
"36112U112p\n"
"LL..RR.RRR\n"
"L0U22R.0RR\n"
"L0.0RR.9RR\n"
"L0.0.RDD7R\n"
"L0.0RR.R.R\n"
"LR.0RDDRD2\n"
"L9.7..RR.R\n"
"L..L.2RDD6\n"
";1D117DDD7`\n"
"];\n"
"\n"
"const currentLevel = levels[level];\n"
"setMap(currentLevel);\n"
"\n"
"setSolids([ player ]);\n"
"\n"
"// START - PLAYER MOVEMENT CONTROLS\n"
"\n"
"onInput(\"s\", () => {\n"
"  const currentPlayer = getFirst(player);\n"
"  const { x, y } = currentPlayer;\n"
"\n"
"  const playerTileSprites = getTile(x, y);\n"
"  if (playerTileSprites.some(({ _type }) => downWalls.includes(_type))) return;\n"
"\n"
"  const belowTileSprites = getTile(x, y+1);\n"
"  if (belowTileSprites.some(({ _type }) => upWalls.includes(_type))) return;\n"
"\n"
"  currentPlayer.y += 1;\n"
"});\n"
"\n"
"onInput(\"d\", () => {\n"
"  const currentPlayer = getFirst(player);\n"
"  const { x, y } = currentPlayer;\n"
"\n"
"  const playerTileSprites = getTile(x, y);\n"
"  if (playerTileSprites.some(({ _type }) => rightWalls.includes(_type))) return;\n"
"\n"
"  const rightTileSprites = getTile(x+1, y);\n"
"  if (rightTileSprites.some(({ _type }) => leftWalls.includes(_type))) return;\n"
"\n"
"  currentPlayer.x += 1;\n"
"});\n"
"\n"
"onInput(\"a\", () => {\n"
"  const currentPlayer = getFirst(player);\n"
"  const { x, y } = currentPlayer;\n"
"\n"
"  const playerTileSprites = getTile(x, y);\n"
"  if (playerTileSprites.some(({ _type }) => leftWalls.includes(_type))) return;\n"
"\n"
"  const leftTileSprites = getTile(x-1, y);\n"
"  if (leftTileSprites.some(({ _type }) => rightWalls.includes(_type))) return;\n"
"\n"
"  currentPlayer.x -= 1;\n"
"});\n"
"\n"
"onInput(\"w\", () => {\n"
"  const currentPlayer = getFirst(player);\n"
"  const { x, y } = currentPlayer;\n"
"\n"
"  const playerTileSprites = getTile(x, y);\n"
"  if (playerTileSprites.some(({ _type }) => upWalls.includes(_type))) return;\n"
"\n"
"  const aboveTileSprites = getTile(x, y-1);\n"
"  if (aboveTileSprites.some(({ _type }) => downWalls.includes(_type))) return;\n"
"\n"
"  currentPlayer.y -= 1;\n"
"});\n"
"\n"
"// END - PLAYER MOVEMENT CONTROLS\n"
"\n"
"onInput(\"j\", () => {\n"
"  const currentLevel = levels[level];\n"
"  if (currentLevel !== undefined) {\n"
"    clearText(\"\");\n"
"    setMap(currentLevel);\n"
"  }\n"
"});\n"
"\n"
"afterInput(() => {\n"
"  const playerArrivedToGoal = goals.some(goal => tilesWith(goal, player).length === 1);\n"
"\n"
"  if (playerArrivedToGoal) {\n"
"    // increase the current level number\n"
"    level = level + 1;\n"
"\n"
"    const currentLevel = levels[level];\n"
"\n"
"    // make sure the level exists and if so set the map\n"
"    if (currentLevel !== undefined) {\n"
"      setMap(currentLevel);\n"
"    } else {\n"
"      addText(\"you win!\", { y: 4, color: [255, 0, 0] });\n"
"    }\n"
"  }\n"
"});\n"
